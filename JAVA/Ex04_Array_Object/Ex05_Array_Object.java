// 클래스 == 타입 == 설계도

class Person{
	String name; //(memberfield)
	int age; //(memberfield)
	//설계도가 사람을 만들 때 반드시 사람의 이름과 나이를 가지게 한다면 > 생성자를 통해 입력을 강제
	//Person(String name, int age) {this.name = name; this.age = age};
	void print() {
		System.out.println(this.name + "." + this.age);
	}
	
}

public class Ex05_Array_Object { //*****제일 중요한 부분*****

	public static void main(String[] args) {
		int[] intarr = new int[10]; //값타입 배열(8가지) + String
		boolean[] booarr = new boolean[5];//값타입 (5개의 방에 false라는 값이 default로 들어가 있다)
		
		Person p = new Person(); //p: 참조변수(Person 객체의 주소값을 가진다)
		p.name = "홍길동";
		p.age = 100;
		 //사람 3명을 만드세요
		// Person p = new Person();
		// Person p2 = new Person();
		// Person p3 = new PErson();
		
		//int[] intarr = new int[10];
		Person[] persons = new Person[3]; // Class는 데이터 타입이다.
		System.out.println("persons: " + persons);
		System.out.println("persons[0]: " + persons[0]); //각각의 방은 null이라고 하는 default값을 갖는다.
		//객체배열은 방을 만들고 방에 객체를 넣어주는 작업...
		//persons[0] person 객체의 주소를 가진다
		persons[0] = new Person(); //***중요*** Person 객체의 주소값을 person 배열의 0번째 칸에 넣는다
		Person p2 = new Person();
		persons[1] = p2;
		persons[2] = new Person();
		
		System.out.println("persons[0] : "+ persons[0]);
		System.out.println("persons[1] : "+ persons[1]);
		System.out.println("persons[2] : "+ persons[2]);
		
		persons[0].name = "김유신";
		persons[0].age = 100;
		
		//객체배열은 방을 만드는 것과 방을 채우는 작업은 별도다 *****
		for(int i = 0; i<persons.length ; i++) {
			System.out.println(persons[i].name);
		}
		
		//객체 배열 3가지 방법으로 만들기
		//1. int[] arr = new int[10]
		Person[] parray = new Person[10]; // 방만 생성
		for(int i = 0; i<parray.length ; i++) {
			parray[i] = new Person();
			System.out.println("주소값: " + parray[i]); 
		}
		
		//2. int[] arr = new int[] {10, 20, 30}
		Person[] parray2 = new Person[] {new Person(), new Person(), new Person()}; //주소를 만들어 넣어주면
		
		//3. int[] arr = {10, 20, 30}
		Person[] parray3 = {new Person(), new Person(), new Person()};
		
		

	}

}
